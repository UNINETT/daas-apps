package com.github.sparkcaller.preprocessing;

import com.github.sparkcaller.utils.BaseGATKProgram;
import com.github.sparkcaller.utils.MiscUtils;
import org.apache.spark.api.java.function.Function;
import scala.Tuple2;

import java.io.File;
import java.util.HashMap;

/*
 * Use the targets generated by the BQSRTargetGenerator to perform BQSR on the input BAM file.
 * Writes a BAM file with recalibrated bases.
 *
 * See:
 * https://www.broadinstitute.org/gatk/documentation/tooldocs/org_broadinstitute_gatk_tools_walkers_readutils_PrintReads.php
 *
 * For more information.
 *
 */
public class BQSR extends BaseGATKProgram implements Function<Tuple2<String, Tuple2<File, File>>, Tuple2<File, File>> {
    final private HashMap<String, File> bqsrTargetMapper;

    public BQSR(String pathToReference, HashMap<String, File> bqsrTargetMapper, String extraArgsString, String coresPerNode) {
        super("PrintReads", extraArgsString);
        setReference(pathToReference);
        setThreads(coresPerNode);

        this.bqsrTargetMapper = bqsrTargetMapper;
    }

    @Override
    public Tuple2<File, File> call(Tuple2<String, Tuple2<File, File>> contigTuple) throws Exception {
        String contig = contigTuple._1;
        Tuple2<File, File> inputOutputTuple = contigTuple._2;

        System.out.println(inputOutputTuple._1.getPath());
        File bqsrTargets = this.bqsrTargetMapper.get(inputOutputTuple._1.getParentFile().getParent());
        changeArgument("-BQSR", bqsrTargets.getPath());

        File inputBam = inputOutputTuple._2;

        setInterval(contig);
        setInputFile(inputBam.getPath());

        String outputBamFilename = MiscUtils.removeExtenstion(inputBam.getPath(), "bam") + "-bqsr.bam";
        File outputBam = new File(outputBamFilename);

        setOutputFile(outputBam.getPath());

        executeProgram();
        return new Tuple2<>(inputOutputTuple._1, outputBam);
    }
}
